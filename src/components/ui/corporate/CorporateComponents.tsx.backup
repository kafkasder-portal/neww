import React from 'react'
import { cn } from '../../../lib/utils'

// ========================================
// ENHANCED CARD COMPONENTS
// ========================================

interface CorporateCardProps {
  children: React.ReactNode
  className?: string
  onClick?: () => void
}

export function CorporateCard({ children, className, onClick }: CorporateCardProps) {
  return (
    <div 
      className={cn('corporate-card', className)}
      onClick={onClick}
    >
      {children}
    </div>
  )
}

interface CorporateCardHeaderProps {
  children: React.ReactNode
  className?: string
}

export function CorporateCardHeader({ children, className }: CorporateCardHeaderProps) {
  return (
    <div className={cn('corporate-card-header', className)}>
      {children}
    </div>
  )
}

interface CorporateCardTitleProps {
  children: React.ReactNode
  className?: string
}

export function CorporateCardTitle({ children, className }: CorporateCardTitleProps) {
  return (
    <h3 className={cn('corporate-card-title', className)}>
      {children}
    </h3>
  )
}

interface CorporateCardContentProps {
  children: React.ReactNode
  className?: string
}

export function CorporateCardContent({ children, className }: CorporateCardContentProps) {
  return (
    <div className={cn('corporate-card-content', className)}>
      {children}
    </div>
  )
}

// ========================================
// KPI CARD COMPONENTS
// ========================================

interface KPICardProps {
  title: string
  value: string | number
  change?: number
  changeType?: 'increase' | 'decrease'
  period?: string
  icon?: React.ReactNode
  className?: string
}

export function KPICard({ 
  title, 
  value, 
  change, 
  changeType, 
  period, 
  icon, 
  className 
}: KPICardProps) {
  return (
    <div className={cn('kpi-card', className)}>
      <div className="flex items-center justify-between">
        <div>
          <p className="kpi-label">{title}</p>
          <p className="kpi-value">{value}</p>
          {change !== undefined && (
            <p className={cn('kpi-change', changeType === 'increase' ? 'positive' : 'negative')}>
              {changeType === 'increase' ? '+' : ''}{change}%
              {period && <span className="text-neutral-500 ml-1">({period})</span>}
            </p>
          )}
        </div>
        {icon && (
          <div className="text-brand-primary-600">
            {icon}
          </div>
        )}
      </div>
    </div>
  )
}

// ========================================
// ENHANCED BUTTON COMPONENTS
// ========================================

interface CorporateButtonProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
  className?: string
  onClick?: () => void
  disabled?: boolean
  type?: 'button' | 'submit' | 'reset'
}

export function CorporateButton({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className,
  onClick,
  disabled,
  type = 'button'
}: CorporateButtonProps) {
  const variantClasses = {
    primary: 'corporate-btn-primary',
    secondary: 'corporate-btn-secondary',
    success: 'corporate-btn-success',
    danger: 'corporate-btn-danger',
    ghost: 'corporate-btn-ghost'
  }

  const sizeClasses = {
    sm: 'corporate-btn-sm',
    md: '',
    lg: 'corporate-btn-lg'
  }

  return (
    <button
      type={type}
      className={cn('corporate-btn', variantClasses[variant], sizeClasses[size], className)}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  )
}

// ========================================
// ENHANCED TABLE COMPONENTS
// ========================================

interface CorporateTableProps {
  children: React.ReactNode
  className?: string
}

export function CorporateTable({ children, className }: CorporateTableProps) {
  return (
    <div className={cn('corporate-table', className)}>
      <table className="w-full">
        {children}
      </table>
    </div>
  )
}

interface CorporateTableHeaderProps {
  children: React.ReactNode
  className?: string
}

export function CorporateTableHeader({ children, className }: CorporateTableHeaderProps) {
  return (
    <thead className={cn('corporate-table-header', className)}>
      {children}
    </thead>
  )
}

interface CorporateTableHeaderCellProps {
  children: React.ReactNode
  className?: string
}

export function CorporateTableHeaderCell({ children, className }: CorporateTableHeaderCellProps) {
  return (
    <th className={cn('corporate-table-header-cell', className)}>
      {children}
    </th>
  )
}

interface CorporateTableRowProps {
  children: React.ReactNode
  className?: string
  onClick?: () => void
}

export function CorporateTableRow({ children, className, onClick }: CorporateTableRowProps) {
  return (
    <tr 
      className={cn('corporate-table-row', className, onClick && 'cursor-pointer')}
      onClick={onClick}
    >
      {children}
    </tr>
  )
}

interface CorporateTableCellProps {
  children: React.ReactNode
  className?: string
  muted?: boolean
}

export function CorporateTableCell({ children, className, muted }: CorporateTableCellProps) {
  return (
    <td className={cn(muted ? 'corporate-table-cell-muted' : 'corporate-table-cell', className)}>
      {children}
    </td>
  )
}

// ========================================
// ENHANCED BADGE COMPONENTS
// ========================================

interface CorporateBadgeProps {
  children: React.ReactNode
  variant?: 'success' | 'warning' | 'danger' | 'info' | 'neutral'
  className?: string
}

export function CorporateBadge({ children, variant = 'neutral', className }: CorporateBadgeProps) {
  const variantClasses = {
    success: 'corporate-badge-success',
    warning: 'corporate-badge-warning',
    danger: 'corporate-badge-danger',
    info: 'corporate-badge-info',
    neutral: 'corporate-badge-neutral'
  }

  return (
    <span className={cn('corporate-badge', variantClasses[variant], className)}>
      {children}
    </span>
  )
}

// ========================================
// ENHANCED FORM COMPONENTS
// ========================================

interface CorporateFormGroupProps {
  children: React.ReactNode
  className?: string
}

export function CorporateFormGroup({ children, className }: CorporateFormGroupProps) {
  return (
    <div className={cn('corporate-form-group', className)}>
      {children}
    </div>
  )
}

interface CorporateFormLabelProps {
  children: React.ReactNode
  className?: string
  htmlFor?: string
}

export function CorporateFormLabel({ children, className, htmlFor }: CorporateFormLabelProps) {
  return (
    <label className={cn('corporate-form-label', className)} htmlFor={htmlFor}>
      {children}
    </label>
  )
}

interface CorporateFormInputProps {
  type?: string
  placeholder?: string
  value?: string
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void
  className?: string
  disabled?: boolean
  error?: string
  help?: string
}

export function CorporateFormInput({ 
  type = 'text',
  placeholder,
  value,
  onChange,
  className,
  disabled,
  error,
  help
}: CorporateFormInputProps) {
  return (
    <div className="space-y-1">
      <input
        type={type}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        disabled={disabled}
        className={cn('corporate-form-input', error && 'border-semantic-danger', className)}
      />
      {error && <p className="corporate-form-error">{error}</p>}
      {help && <p className="corporate-form-help">{help}</p>}
    </div>
  )
}

// ========================================
// ENHANCED MODAL COMPONENTS
// ========================================

interface CorporateModalProps {
  isOpen: boolean
  onClose: () => void
  children: React.ReactNode
  className?: string
}

export function CorporateModal({ isOpen, onClose, children, className }: CorporateModalProps) {
  if (!isOpen) return null

  return (
    <div className="corporate-modal" onClick={onClose}>
      <div 
        className={cn('corporate-modal-content', className)}
        onClick={(e) => e.stopPropagation()}
      >
        {children}
      </div>
    </div>
  )
}

interface CorporateModalHeaderProps {
  children: React.ReactNode
  className?: string
  onClose?: () => void
}

export function CorporateModalHeader({ children, className, onClose }: CorporateModalHeaderProps) {
  return (
    <div className={cn('corporate-modal-header', className)}>
      {children}
      {onClose && (
        <button
          onClick={onClose}
          className="text-neutral-400 hover:text-neutral-600 transition-colors"
        >
          âœ•
        </button>
      )}
    </div>
  )
}

interface CorporateModalTitleProps {
  children: React.ReactNode
  className?: string
}

export function CorporateModalTitle({ children, className }: CorporateModalTitleProps) {
  return (
    <h2 className={cn('corporate-modal-title', className)}>
      {children}
    </h2>
  )
}

interface CorporateModalBodyProps {
  children: React.ReactNode
  className?: string
}

export function CorporateModalBody({ children, className }: CorporateModalBodyProps) {
  return (
    <div className={cn('corporate-modal-body', className)}>
      {children}
    </div>
  )
}

interface CorporateModalFooterProps {
  children: React.ReactNode
  className?: string
}

export function CorporateModalFooter({ children, className }: CorporateModalFooterProps) {
  return (
    <div className={cn('corporate-modal-footer', className)}>
      {children}
    </div>
  )
}

// ========================================
// ENHANCED ALERT COMPONENTS
// ========================================

interface CorporateAlertProps {
  children: React.ReactNode
  variant?: 'success' | 'warning' | 'danger' | 'info'
  className?: string
}

export function CorporateAlert({ children, variant = 'info', className }: CorporateAlertProps) {
  const variantClasses = {
    success: 'corporate-alert-success',
    warning: 'corporate-alert-warning',
    danger: 'corporate-alert-danger',
    info: 'corporate-alert-info'
  }

  return (
    <div className={cn('corporate-alert', variantClasses[variant], className)}>
      {children}
    </div>
  )
}

// ========================================
// ENHANCED PROGRESS COMPONENTS
// ========================================

interface CorporateProgressProps {
  value: number
  max?: number
  variant?: 'default' | 'success' | 'warning' | 'danger'
  className?: string
  showLabel?: boolean
}

export function CorporateProgress({ 
  value, 
  max = 100, 
  variant = 'default',
  className,
  showLabel = false
}: CorporateProgressProps) {
  const percentage = (value / max) * 100

  const variantClasses = {
    default: 'corporate-progress-bar',
    success: 'corporate-progress-success',
    warning: 'corporate-progress-warning',
    danger: 'corporate-progress-danger'
  }

  return (
    <div className={cn('space-y-2', className)}>
      {showLabel && (
        <div className="flex justify-between text-sm text-neutral-600">
          <span>Progress</span>
          <span>{Math.round(percentage)}%</span>
        </div>
      )}
      <div className="corporate-progress">
        <div 
          className={cn(variantClasses[variant])}
          style={{ width: `${percentage}%` }}
        />
      </div>
    </div>
  )
}

// ========================================
// ENHANCED EMPTY STATE COMPONENTS
// ========================================

interface CorporateEmptyStateProps {
  icon?: React.ReactNode
  title: string
  description: string
  action?: React.ReactNode
  className?: string
}

export function CorporateEmptyState({ 
  icon, 
  title, 
  description, 
  action, 
  className 
}: CorporateEmptyStateProps) {
  return (
    <div className={cn('corporate-empty', className)}>
      {icon && <div className="corporate-empty-icon">{icon}</div>}
      <h3 className="corporate-empty-title">{title}</h3>
      <p className="corporate-empty-description">{description}</p>
      {action && <div>{action}</div>}
    </div>
  )
}

// ========================================
// ENHANCED QUICK ACCESS CARD
// ========================================

interface QuickAccessCardProps {
  title: string
  description: string
  icon: React.ReactNode
  color: string
  link: string
  className?: string
}

export function QuickAccessCard({ 
  title, 
  description, 
  icon, 
  color, 
  link, 
  className 
}: QuickAccessCardProps) {
  return (
    <a href={link} className={cn('quick-access-card', className)}>
      <div className={cn('quick-access-icon', color)}>
        {icon}
      </div>
      <h3 className="quick-access-title">{title}</h3>
      <p className="quick-access-description">{description}</p>
    </a>
  )
}

// ========================================
// ENHANCED STATISTICS CARD
// ========================================

interface StatisticsCardProps {
  number: string | number
  label: string
  change?: number
  changeType?: 'increase' | 'decrease'
  period?: string
  className?: string
}

export function StatisticsCard({ 
  number, 
  label, 
  change, 
  changeType, 
  period, 
  className 
}: StatisticsCardProps) {
  return (
    <div className={cn('stats-card', className)}>
      <div className="stats-number">{number}</div>
      <div className="stats-label">{label}</div>
      {change !== undefined && (
        <div className={cn('stats-change', changeType === 'increase' ? 'text-semantic-success' : 'text-semantic-danger')}>
          {changeType === 'increase' ? '+' : ''}{change}%
          {period && <span className="text-neutral-500 ml-1">({period})</span>}
        </div>
      )}
    </div>
  )
}

// ========================================
// ENHANCED SEARCH COMPONENT
// ========================================

interface CorporateSearchProps {
  placeholder?: string
  value?: string
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void
  className?: string
}

export function CorporateSearch({ 
  placeholder = 'Search...', 
  value, 
  onChange, 
  className 
}: CorporateSearchProps) {
  return (
    <div className={cn('corporate-search', className)}>
      <input
        type="text"
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        className="corporate-search-input"
      />
      <svg className="corporate-search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
  )
}

// ========================================
// ENHANCED STATUS INDICATOR
// ========================================

interface CorporateStatusIndicatorProps {
  status: 'online' | 'offline' | 'busy' | 'error'
  label?: string
  className?: string
}

export function CorporateStatusIndicator({ 
  status, 
  label, 
  className 
}: CorporateStatusIndicatorProps) {
  return (
    <div className={cn('corporate-status', className)}>
      <div className={cn('corporate-status-dot', status)} />
      {label && <span className="text-sm text-neutral-600">{label}</span>}
    </div>
  )
}

// ========================================
// ENHANCED AVATAR COMPONENT
// ========================================

interface CorporateAvatarProps {
  src?: string
  alt?: string
  fallback?: string
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

export function CorporateAvatar({ 
  src, 
  alt, 
  fallback, 
  size = 'md', 
  className 
}: CorporateAvatarProps) {
  const sizeClasses = {
    sm: 'corporate-avatar-sm',
    md: 'corporate-avatar',
    lg: 'corporate-avatar-lg'
  }

  if (src) {
    return (
      <img
        src={src}
        alt={alt}
        className={cn(sizeClasses[size], 'rounded-full object-cover', className)}
      />
    )
  }

  return (
    <div className={cn(sizeClasses[size], className)}>
      {fallback || 'U'}
    </div>
  )
}
